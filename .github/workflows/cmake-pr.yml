name: CMake PR

on:
  pull_request:

permissions: write-all

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

  utility:
    runs-on: ubuntu-latest
    outputs:
      isRelease: ${{ steps.isRelease.outputs.release }}
    
    steps:
    - uses: actions/checkout@main
      with: 
        fetch-depth: 0
    
    # Install python wrappers for gh
    - name: Install PyGitHub
      run: pip3 install PyGithub

    # Detect release
    - name: Check if PR is release
      id: isRelease
      working-directory: ${{github.workspace}}/.github/workflows
      env: 
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_MERGE_BASE: ${{ github.base_ref }}
        GIT_MERGE_HEAD: ${{ github.head_ref }}
        GIT_MERGE_COMMIT: ${{ github.sha }}
        GIT_REPO: ${{ github.repository }}
      run: python3 versioncheck

    # Code formatting with Clang linter
    - uses: DoozyX/clang-format-lint-action@v0.14
      with:
        source: '.'
        extensions: 'h,c,hpp,cpp'
        clangFormatVersion: 14
        inplace: True

    # Commit clang-format changes
    - uses: EndBug/add-and-commit@v4
      with:
        author_name: CI bot
        author_email: dev@featuremine.com
        message: 'Committing clang-format changes'
      env:
        GITHUB_TOKEN: ${{ secrets.UTILITY_COMMIT_TOKEN }}

  build-manylinux:
    needs: utility
    runs-on: hosted-gh-centos7-gcc10.2.0-test
    
    steps:
    - uses: actions/checkout@main

    - name: Configure ${{ github.event.repository.name }} CMake with fm gcc
      run: >
        cmake -B ${{github.workspace}}/build
        -DBUILD_TESTING=ON -DBUILD_WHEEL=ON -DBUILD_API_DOCS=ON
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      
    - name: Build ${{ github.event.repository.name }} with fm gcc
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j4

    - name: Test ${{ github.event.repository.name }} with ctest
      working-directory: ${{github.workspace}}/build
      run: ctest --extra-verbose -C ${{env.BUILD_TYPE}}

    - name: Test ${{ github.event.repository.name }} logs
      if: success() || failure()
      run: cat ${{github.workspace}}/build/Testing/Temporary/LastTest.log
      
    - name: Compress documentation
      if: needs.utility.outputs.isRelease == 'release'
      working-directory: ${{github.workspace}}/build
      run: tar -czvf docs-v$(cat ../VERSION).tar.gz -C docs/sphinx . 
      
    - name: Upload documentation
      if: needs.utility.outputs.isRelease == 'release'
      working-directory: ${{github.workspace}}/build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload v$(cat ../VERSION) docs-v$(cat ../VERSION).tar.gz --clobber

    - name: Package
      if: needs.utility.outputs.isRelease == 'release'
      working-directory: ${{github.workspace}}/build
      run: cpack -G RPM
    
    - name: Upload package
      if: needs.utility.outputs.isRelease == 'release'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload v$(cat VERSION) ${{github.workspace}}/build/yamal-$(cat VERSION)-Linux.rpm --clobber
