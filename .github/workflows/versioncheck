#!/usr/bin/env python3
import os
import sys
import subprocess
from os import path
from github import Github

def version_file():
    where = path.dirname(path.dirname(path.dirname(path.abspath(__file__))))
    return path.join(where, 'VERSION')

class Version(object):
    def __init__(self, version_str):
        self._numbers = [int(x) for x in str(version_str).split('.')]

    def regular(self):
        return len(self._numbers) == 3

    def bugfix(self):
        return len(self._numbers) == 4

    def __lt__(self, other):
        for x, y in zip(self._numbers, other._numbers):
            if x < y:
                return True
        
        return len(self._numbers) < len(other._numbers)
    def __str__(self):
        return '.'.join([str(x) for x in self._numbers])

def version():
    return Version(list(open(version_file()))[0].strip())

def version_check():
    res = subprocess.run(['git', 'diff', f'origin/{os.getenv("GIT_MERGE_BASE")}', '--', version_file()], capture_output=True)
    assert not res.returncode, f'git diff failed to execute with output\n{res.stderr.decode("UTF-8")}'
    if not res.stdout:
        return None
    return version()

ghrepo = Github(os.getenv('GH_TOKEN')).get_repo(os.getenv('GIT_REPO'))

def releases():
    rels = []
    for release in ghrepo.get_releases():
        if not release.draft:
            rels.append(Version(release.tag_name[1:]))
    return sorted(rels, reverse=True)

def drafts():
    drafts = []
    for release in ghrepo.get_releases():
        if release.draft:
            drafts.append(release)
    return drafts

def main_merge():
    return os.getenv('GIT_MERGE_BASE') == 'main'

def from_dev_merge():
    return os.getenv('GIT_MERGE_HEAD') == 'dev'

if __name__ == '__main__':
    ver = version_check()
    rels = releases()
    version_bump = ver and ver.regular() and (not rels or rels[0] < ver)

    if ver and not (ver.regular() or ver.bugfix()):
        raise RuntimeError("Improper version in the VERSION file")

    if main_merge() and not from_dev_merge():
        raise RuntimeError("Merge to main allowed only from dev branch")
    
    if main_merge() and not version_bump:
        raise RuntimeError("Merging to main allowed with a proper version bump only")

    bug_fix_release = ver and ver.bugfix()
    proper_release = main_merge() and version_bump
    # TODO need to check that bug fix is proper
    # derived from existing release and large than existing bug fixes

    if proper_release or bug_fix_release:
        # check if draft release exists
        updating_draft = False
        existent_drafts = drafts()
        for draft in existent_drafts:
            if str(ver) in draft.tag_name:
                updating_draft = True 
                print(f'Draft for version {ver} found, ammending target_commitish to {os.getenv("GIT_MERGE_COMMIT")}')
                #if it does, ammend it by changing target_commitish
                #update_release(name, message, draft=False, prerelease=False, tag_name=NotSet, target_commitish=NotSet)
                draft.update_release(
                    f'v{ver}', f'draft release for version v{ver}', draft=True, prerelease=False, 
                    tag_name=f'v{ver}', target_commitish=os.getenv('GIT_MERGE_COMMIT')
                )
                break        
        if not updating_draft:
            #else create new
            print(f'No draft found for version {ver}. Creating new draft.')
            #create_git_release(tag, name, message, draft=False, prerelease=False, target_commitish=NotSet)
            ghrepo.create_git_release(
                f'v{ver}', f'v{ver}', f'draft release for version v{ver}',
                draft=True, prerelease=False, target_commitish=os.getenv('GIT_MERGE_COMMIT')
            )
        print("::set-output name=release::release")
    else:
        print("::set-output name=release::regular")
