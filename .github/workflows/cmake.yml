name: CMake

on:
  release:
    types: [prereleased]
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@main

    - name: Install tclap
      run: sudo apt-get install libtclap-dev
    - name: Install gtest
      run: git clone --depth 1 https://github.com/google/googletest.git -b release-1.11.0 && cd googletest && mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX=/usr .. && make && sudo make install && cd ../../ && rm -rf googletest
    - name: Install Doxygen
      run: sudo apt-get install doxygen
    - name: Install sphinx
      run: sudo apt-get install python3-sphinx && pip3 install breathe && pip3 install sphinx_rtd_theme && pip3 install m2r && pip3 install mistune==0.8.4 && pip3 install sphinx-autodoc-typehints
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Package
      working-directory: ${{github.workspace}}/build
      run: cpack -G DEB
  
    - name: EnvTest
      env: 
        GITHUB_TOKEN: ${{ github.token }}
      run: echo "${{ secrets.GITHUB_TOKEN }} ${CONTENT_TYPE_HEADER}"

    - name: Upload
      run: |
        curl -f -sSL -XPOST \
        --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' 
        --header 'content-type: application/zip' 
        --upload-file ${{github.workspace}}/build/yamal-7.2.6-Linux.deb 
        https://uploads.github.com/repos/featuremine/yamal/releases/72552575/assets?name=yamal-7.2.6-Linux.deb
