#!/bin/bash

usage () {
cat <<EOF
Usage: $0 [OPTION]... [VAR=VALUE]... [TARGET]

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  --srcdir=DIR            source directory [detected]

Installation directories:
  --prefix=PREFIX         main installation prefix [/opt/featuremine/tools]

Fine tuning of the installation directories:
  --libdir=DIR            library files for the linker [PREFIX/lib]
  --includedir=DIR        include files for the C compiler [PREFIX/include]
  --testsdir=DIR          test programs for the libraries [PREFIX/tests]
  --bindir=DIR            programs that use the libraries [PREFIX/bin]
  --scriptsdir=DIR        general purpose scripts [PREFIX/scripts]
  --pythondir=DIR         python package [PREFIX/python]
  --sourcesdir=DIR        c and cpp sources [PREFIX/src]

System types:
  --target=TARGET         configure to run on target TARGET [detected]
  --host=HOST             same as --target
  --build=BUILD           build system type; used only to infer cross-compiling

Optional features:
  --enable-debug          build with debugging information [disabled]
  --disable-warnings      build with recommended warnings flags [enabled]

Some influential environment variables:
  CC                      C compiler command [detected]
  CXX                     CXX compiler command [detected]
  CFLAGS                  C compiler flags [-Os -pipe ...]
  CXXFLAGS                CXX compiler flags [-Os -pipe ...]
  CROSS_COMPILE           prefix for cross compiler and tools [none]

Use these variables to override the choices made by configure.

EOF
exit 0
}

# Helper functions

quote () {
tr '\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo "$1" ; return 0 ; }
$1
EOF
printf %s\\n "$1" | sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" -e "s#^'\([-[:alnum:]_,./:]*\)=\(.*\)\$#\1='\2#"
}
echo () { printf "%s\n" "$*" ; }
fail () { echo "$*" 1>&2; exit 1 ; }
fnmatch () { eval "case \"\$2\" in $1) return 0 ;; *) return 1 ;; esac" ; }
cmdexists () { type "$1" >/dev/null 2>&1 ; }
trycc () { test -z "$CC" && cmdexists "$1" && CC=$1 ; }
trycxx () { test -z "$CXX" && cmdexists "$1" && CXX=$1 ; }
testcc () {
if ! cmdexists "$1"; then
return 1
fi
echo "typedef int x;" > "$tmpc"
if output=$($1 -c -o /dev/null "$tmpc" 2>&1) ; then
return 0
else
return 1
fi
}

checkcc () {
local CHECKCC=${1}
if cmdexists ${!CHECKCC}; then
  if ! testcc ${!CHECKCC}; then
    printf "Provided compiler does not work"
    exit 1
  fi
else
  if testcc ${2}; then
    eval "$CHECKCC=\"\$2\""
  else
    if [ $(uname -s) != "Darwin"]; then
      local CC_FIRST=${3}
      local CC_SECOND=${4}
    else
      local CC_FIRST=${4}
      local CC_SECOND=${3}
    fi
    if testcc ${CC_FIRST}; then
      eval "$CHECKCC=\"\$CC_FIRST\""
    elif testcc ${CC_SECOND}; then
      eval "$CHECKCC=\"\$CC_SECOND\""
    else
      printf "A compiler was not found"
      exit 1
    fi
  fi
fi
}

stripdir () {
while eval "fnmatch '*/' \"\${$1}\"" ; do eval "$1=\${$1%/}" ; done
}

trycppif () {
printf "checking preprocessor condition %s... " "$1"
echo "typedef int x;" > "$tmpc"
echo "#if $1" >> "$tmpc"
echo "#error yes" >> "$tmpc"
echo "#endif" >> "$tmpc"
if $CC $2 -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "false\n"
return 1
else
printf "true\n"
return 0
fi
}

tryflag () {
printf "checking whether CC compiler accepts %s... " "$2"
echo "typedef int x;" > "$tmpc"
if $CC $CFLAGS_TRY $2 -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
eval "$1=\"\${$1} \$2\""
eval "$1=\${$1# }"
return 0
else
printf "no\n"
return 1
fi
}

tryflagxx () {
printf "checking whether CXX compiler accepts %s... " "$2"
echo "typedef int x;" > "$tmpc"
if $CXX $2 -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
eval "$1=\"\${$1} \$2\""
eval "$1=\${$1# }"
return 0
else
printf "no\n"
return 1
fi
}

tryldflag () {
printf "checking whether linker accepts %s... " "$2"
echo "typedef int x;" > "$tmpc"
if $CXX $LDFLAGS_AUTO -nostdlib $2 -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
eval "$1=\"\${$1} \$2\""
eval "$1=\${$1# }"
return 0
else
printf "no\n"
return 1
fi
}

# Beginning of actual script

CFLAGS_C99FSE=
CFLAGS_AUTO=
CXXFLAGS_AUTO=
CFLAGS_TRY=
LDFLAGS_AUTO=
LDFLAGS_TRY=
srcdir=
prefix=/opt/featuremine/tools
libdir='$(prefix)/lib'
includedir='$(prefix)/include'
testsdir='$(prefix)/tests'
bindir='$(prefix)/bin'
scriptsdir='$(prefix)/scripts'
pythondir='$(prefix)/python'
sourcesdir='$(prefix)/src'
build=
target=
debug=no
warnings=yes

for arg ; do
case "$arg" in
--help|-h) usage ;;
--srcdir=*) srcdir=${arg#*=} ;;
--prefix=*) prefix=${arg#*=} ;;
--libdir=*) libdir=${arg#*=} ;;
--includedir=*) includedir=${arg#*=} ;;
--testsdir=*) testsdir=${arg#*=} ;;
--bindir=*) bindir=${arg#*=} ;;
--scriptsdir=*) scriptsdir=${arg#*=} ;;
--pythondir=*) pythondir=${arg#*=} ;;
--sourcesdir=*) sourcesdir=${arg#*=} ;;
--enable-debug|--enable-debug=yes) debug=yes ;;
--disable-debug|--enable-debug=no) debug=no ;;
--enable-warnings|--enable-warnings=yes) warnings=yes ;;
--disable-warnings|--enable-warnings=no) warnings=no ;;
--enable-*|--disable-*|--with-*|--without-*|--*dir=*) ;;
--host=*|--target=*) target=${arg#*=} ;;
--build=*) build=${arg#*=} ;;
-* ) echo "$0: unknown option $arg" ;;
AR=*) AR=${arg#*=} ;;
RANLIB=*) RANLIB=${arg#*=} ;;
CC=*) CC=${arg#*=} ;;
CXX=*) CXX=${arg#*=} ;;
CFLAGS=*) CFLAGS=${arg#*=} ;;
CXXFLAGS=*) CXXFLAGS=${arg#*=} ;;
CPPFLAGS=*) CPPFLAGS=${arg#*=} ;;
LDFLAGS=*) LDFLAGS=${arg#*=} ;;
CROSS_COMPILE=*) CROSS_COMPILE=${arg#*=} ;;
*=*) ;;
*) build=$arg ; target=$arg ;;
esac
done

for i in srcdir prefix libdir includedir scriptsdir pythondir testsdir bindir sourcesdir; do
stripdir $i
done

#
# Get the source dir for out-of-tree builds
#
if test -z "$srcdir" ; then
srcdir="${0%/configure}"
stripdir srcdir
fi
abs_builddir="$(pwd)" || fail "$0: cannot determine working directory"
abs_srcdir="$(cd $srcdir && pwd)" || fail "$0: invalid source directory $srcdir"
test "$abs_srcdir" = "$abs_builddir" && srcdir=.
test "$srcdir" != "." && test -f Makefile && test ! -h Makefile && fail "$0: Makefile already exists in the working directory"

#
# Get a temp filename we can use
#
i=0
set -C
while : ; do i=$(($i+1))
tmpc="./conf$$-$PPID-$i.c"
2>|/dev/null > "$tmpc" && break
test "$i" -gt 50 && fail "$0: cannot create temporary file $tmpc"
done
set +C
trap 'rm "$tmpc"' EXIT INT QUIT TERM HUP

#
# Check whether we are cross-compiling, and set a default
# CROSS_COMPILE prefix if none was provided.
#
test "$target" && \
test "$target" != "$build" && \
test -z "$CROSS_COMPILE" && \
CROSS_COMPILE="$target-"

#
# Find a C compiler to use
#
printf "checking for C compiler... "
checkcc CC /opt/featuremine/tools/bin/x86_64-linux-musl-gcc ${CROSS_COMPILE}gcc ${CROSS_COMPILE}clang
printf "%s\n" "${CC}"

#
# Figure out options to force errors on unknown flags.
#
tryflag CFLAGS_TRY -Werror=unknown-warning-option
tryflag CFLAGS_TRY -Werror=unused-command-line-argument
tryflag CFLAGS_TRY -Werror=ignored-optimization-argument

#
# Need to know if the compiler is gcc or clang to decide which toolchain
# wrappers to build.
#
printf "checking for C compiler family... "
cc_ver="$(LC_ALL=C $CC -v 2>&1)"
cc_family=unknown
if fnmatch '*gcc\ version*' "$cc_ver" ; then
cc_family=gcc
elif fnmatch '*clang\ version*' "$cc_ver" ; then
cc_family=clang
fi
echo "$cc_family"


#
# Find a CXX compiler to use
#
printf "checking for CXX compiler... "
checkcc CXX /opt/featuremine/tools/bin/x86_64-linux-musl-g++ ${CROSS_COMPILE}g++ ${CROSS_COMPILE}clang++
printf "%s\n" "${CXX}"

#
# Find the target architecture
#
printf "checking target system type... "
test -n "$target" || target=$($CC -dumpmachine 2>/dev/null) || target=unknown
printf "%s\n" "$target"

#
# Convert to just ARCH
#
case "$target" in
# Catch these early to simplify matching for 32-bit archs
arm*) ARCH=arm ;;
aarch64*) ARCH=aarch64 ;;
i?86-nt32*) ARCH=nt32 ;;
i?86*) ARCH=i386 ;;
x86_64-x32*|x32*|x86_64*x32) ARCH=x32 ;;
x86_64-nt64*) ARCH=nt64 ;;
x86_64*) ARCH=x86_64 ;;
m68k*) ARCH=m68k ;;
mips64*|mipsisa64*) ARCH=mips64 ;;
mips*) ARCH=mips ;;
microblaze*) ARCH=microblaze ;;
or1k*) ARCH=or1k ;;
powerpc64*|ppc64*) ARCH=powerpc64 ;;
powerpc*|ppc*) ARCH=powerpc ;;
riscv64*) ARCH=riscv64 ;;
sh[1-9bel-]*|sh|superh*) ARCH=sh ;;
s390x*) ARCH=s390x ;;
unknown) fail "$0: unable to detect target arch; try $0 --target=..." ;;
*) fail "$0: unknown or unsupported target \"$target\"" ;;
esac

#
# Try to get a conforming C99 freestanding environment
#
tryflag CFLAGS_C99FSE -ffreestanding \
|| tryflag CFLAGS_C99FSE -fno-builtin
tryflag CFLAGS_C99FSE -fexcess-precision=standard \
|| { test "$ARCH" = i386 && tryflag CFLAGS_C99FSE -ffloat-store ; }
tryflag CFLAGS_C99FSE -frounding-math


#
# The GNU toolchain defaults to assuming unmarked files need an
# executable stack, potentially exposing vulnerabilities in programs
# linked with such object files. Fix this.
#
tryflag CFLAGS_C99FSE -Wa,--noexecstack

#
# Enable debugging if requessted.
#
test "$debug" = yes && CFLAGS_AUTO=-g && CXXFLAGS_AUTO=-g

if fnmatch '/opt/featuremine/tools*' "$CXX" && fnmatch '/opt/featuremine/tools*' "$CC" ; then
  if [ -d /opt/featuremine/tools/lib/pkgconfig ]; then
    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/featuremine/tools/lib/pkgconfig
  else
    fail "Could not find pkgconfig path"
  fi
fi

# checking libraries
DEP_LIBS=
checklib () {
  local RES_CFLAGS="$(pkg-config --cflags ${1})"
  if [ $? ]; then
    if tryflag CFLAGS_TRY "${RES_CFLAGS}"; then
      local RES_LDFLAGS="$(pkg-config --libs ${1})"
      if [ $? ]; then
        if tryldflag LDFLAGS_TRY "${RES_LDFLAGS}"; then
          DEP_LIBS="${DEP_LIBS} ${1}"
        else
          fail "Linker does not accept ${1} library"
        fi
      else
        fail "pkg-config did not find ${1} library"
      fi
    else
      fail "Compiler does not accept ${1} library"
    fi
  else
    fail "pkg-config did not find ${1} library"
  fi
}

checklib libfmc
checklib libfmc++
checklib gtest

# add c flags for libs
tryflag CFLAGS_AUTO "$(pkg-config --cflags ${DEP_LIBS})"
tryflag CFLAGS_AUTO -pipe
tryflag CFLAGS_AUTO -fdiagnostics-color=always
tryflag CFLAGS_AUTO -D_FILE_OFFSET_BITS=64
tryflag CFLAGS_AUTO -fPIC
tryflag CFLAGS_AUTO -fvisibility=hidden

tryflagxx CXXFLAGS_AUTO "$(pkg-config --cflags ${DEP_LIBS})"
tryflagxx CXXFLAGS_AUTO -pipe
tryflagxx CXXFLAGS_AUTO -fdiagnostics-color=always
tryflagxx CXXFLAGS_AUTO -D_FILE_OFFSET_BITS=64
tryflagxx CXXFLAGS_AUTO -fPIC
tryflagxx CXXFLAGS_AUTO -fvisibility=hidden
tryflagxx CXXFLAGS_AUTO -std=c++17
tryflagxx CXXFLAGS_AUTO -fconcepts
tryflagxx CXXFLAGS_AUTO -fvisibility-inlines-hidden

tryldflag LDFLAGS_AUTO -Llib
if fnmatch '/opt/featuremine/tools*' "$CXX" && fnmatch '/opt/featuremine/tools*' "$CC" ; then
tryldflag LDFLAGS_AUTO -static-libstdc++
tryldflag LDFLAGS_AUTO -static-libgcc
tryldflag LDFLAGS_AUTO -static
fi
tryldflag LDFLAGS_AUTO "$(pkg-config --libs --static ${DEP_LIBS})"

#
# If debugging is disabled, omit frame pointer. Modern GCC does this
# anyway on most archs even when debugging is enabled since the frame
# pointer is no longer needed for debugging.
#
if fnmatch '-g*|*\ -g*' "$CFLAGS_AUTO $CFLAGS" ; then :
tryflag CFLAGS_AUTO -DNBUILD
else
tryflag CFLAGS_AUTO -fomit-frame-pointer
fi

if fnmatch '-g*|*\ -g*' "$CXXFLAGS_AUTO $CXXFLAGS" ; then :
tryflagxx CXXFLAGS_AUTO -DNBUILD
else
tryflagxx CXXFLAGS_AUTO -fomit-frame-pointer
fi

#
# GCC defines -w as overriding any -W options, regardless of order, but
# clang has a bunch of annoying warnings enabled by default and needs -w
# to start from a clean slate. So use -w if building with clang. Also
# turn off a common on-by-default cast warning regardless of compiler.
#
test "$cc_family" = clang && tryflag CFLAGS_AUTO -w

#
# GCC ignores unused arguements by default, but Clang needs this extra
# parameter to stop printing warnings about LDFLAGS passed during
# compiling stage and CFLAGS passed during linking stage.
#
test "$cc_family" = clang && tryflag CFLAGS_AUTO -Qunused-arguments

if test "x$warnings" = xyes ; then
tryflag CFLAGS_AUTO -Wduplicate-decl-specifier

tryflag CFLAGS_AUTO -Waddress
tryflag CFLAGS_AUTO -Warray-bounds
tryflag CFLAGS_AUTO -Wchar-subscripts
tryflag CFLAGS_AUTO -Winit-self
tryflag CFLAGS_AUTO -Wreturn-type
tryflag CFLAGS_AUTO -Wsequence-point
tryflag CFLAGS_AUTO -Wstrict-aliasing
tryflag CFLAGS_AUTO -Wunused-function
tryflag CFLAGS_AUTO -Wunused-label
tryflag CFLAGS_AUTO -Wunused-variable
tryflag CFLAGS_AUTO -Winvalid-pch
tryflag CFLAGS_AUTO -Wall

tryflagxx CXXFLAGS_AUTO -Waddress
tryflagxx CXXFLAGS_AUTO -Warray-bounds
tryflagxx CXXFLAGS_AUTO -Wchar-subscripts
tryflagxx CXXFLAGS_AUTO -Winit-self
tryflagxx CXXFLAGS_AUTO -Wreturn-type
tryflagxx CXXFLAGS_AUTO -Wsequence-point
tryflagxx CXXFLAGS_AUTO -Wstrict-aliasing
tryflagxx CXXFLAGS_AUTO -Wunused-function
tryflagxx CXXFLAGS_AUTO -Wunused-label
tryflagxx CXXFLAGS_AUTO -Wunused-variable
tryflagxx CXXFLAGS_AUTO -Winvalid-pch
tryflagxx CXXFLAGS_AUTO -Wall
tryflagxx CXXFLAGS_AUTO -Wnon-virtual-dtor
fi


# Figure out arch variants for archs with variants
SUBARCH=
t="$CFLAGS_C99FSE $CPPFLAGS $CFLAGS"

if test "$ARCH" = "i386" ; then
printf "checking whether compiler can use ebx in PIC asm constraints... "
cat > "$tmpc" <<EOF
int foo(int x) { __asm__ ( "" : "+b"(x) ); return x; }
EOF
if $CC $CFLAGS_C99FSE $CPPFLAGS $CFLAGS -fPIC \
  -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
else
printf "no\n"
CFLAGS_AUTO="$CFLAGS_AUTO -DBROKEN_EBX_ASM"
fi
fi

if test "$ARCH" = "x86_64" ; then
trycppif __ILP32__ "$t" && ARCH=x32
fi

if test "$ARCH" = "arm" ; then
if trycppif __thumb2__ "$t" ; then
tryflag CFLAGS_AUTO -mimplicit-it=always
tryflag CFLAGS_AUTO -Wa,-mimplicit-it=always
tryflag CFLAGS_AUTO -Wa,-mthumb
fi
trycppif __ARMEB__ "$t" && SUBARCH=${SUBARCH}eb
trycppif __ARM_PCS_VFP "$t" && SUBARCH=${SUBARCH}hf
# Versions of clang up until at least 3.8 have the wrong constraint codes
# for floating point operands to inline asm. Detect this so the affected
# source files can just disable the asm.
if test "$cc_family" = clang ; then
printf "checking whether clang's vfp asm constraints work... "
echo 'float f(float x) { __asm__("":"+t"(x)); return x; }' > "$tmpc"
if $CC $CFLAGS_C99FSE $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
else
printf "no\n"
CFLAGS_AUTO="$CFLAGS_AUTO -DBROKEN_VFP_ASM"
CFLAGS_AUTO="${CFLAGS_AUTO# }"
fi
fi
fi

if test "$ARCH" = "aarch64" ; then
trycppif __AARCH64EB__ "$t" && SUBARCH=${SUBARCH}_be
fi

if test "$ARCH" = "m68k" ; then
if trycppif "__HAVE_68881__" ; then : ;
elif trycppif "__mcffpu__" ; then SUBARCH="-fp64"
else SUBARCH="-sf"
fi
fi

if test "$ARCH" = "mips" ; then
trycppif "__mips_isa_rev >= 6" "$t" && SUBARCH=${SUBARCH}r6
trycppif "_MIPSEL || __MIPSEL || __MIPSEL__" "$t" && SUBARCH=${SUBARCH}el
trycppif __mips_soft_float "$t" && SUBARCH=${SUBARCH}-sf
fi

if test "$ARCH" = "mips64" ; then
trycppif "_MIPS_SIM != _ABI64" "$t" && ARCH=mipsn32
trycppif "__mips_isa_rev >= 6" "$t" && SUBARCH=${SUBARCH}r6
trycppif "_MIPSEL || __MIPSEL || __MIPSEL__" "$t" && SUBARCH=${SUBARCH}el
trycppif __mips_soft_float "$t" && SUBARCH=${SUBARCH}-sf
fi

if test "$ARCH" = "powerpc" ; then
trycppif "__NO_FPRS__ && !_SOFT_FLOAT" "$t" && fail \
  "$0: error: compiler's floating point configuration is unsupported"
trycppif _SOFT_FLOAT "$t" && SUBARCH=${SUBARCH}-sf
printf "checking whether compiler can use 'd' constraint in asm... "
echo 'double f(double x) { __asm__ ("fabs %0, %1" : "=d"(x) : "d"(x)); return x; }' > "$tmpc"
if $CC $CFLAGS_C99FSE $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
else
printf "no\n"
CFLAGS_AUTO="$CFLAGS_AUTO -DBROKEN_PPC_D_ASM"
CFLAGS_AUTO="${CFLAGS_AUTO# }"
fi
fi

test "$ARCH" = "microblaze" && trycppif __MICROBLAZEEL__ "$t" \
&& SUBARCH=${SUBARCH}el

if test "$ARCH" = "powerpc64" ; then
trycppif "_CALL_ELF == 2" "$t" || fail "$0: error: unsupported powerpc64 ABI"
trycppif __LITTLE_ENDIAN__ "$t" && SUBARCH=${SUBARCH}le
trycppif _SOFT_FLOAT "$t" && fail "$0: error: soft-float not supported on powerpc64"
fi

if test "$ARCH" = "riscv64" ; then
trycppif __riscv_float_abi_soft "$t" && SUBARCH=${SUBARCH}-sf
trycppif __riscv_float_abi_single "$t" && SUBARCH=${SUBARCH}-sp
fi

if test "$ARCH" = "sh" ; then
tryflag CFLAGS_AUTO -Wa,--isa=any
trycppif __BIG_ENDIAN__ "$t" && SUBARCH=${SUBARCH}eb
if trycppif "__SH_FPU_ANY__ || __SH4__" "$t" ; then
# Some sh configurations are broken and replace double with float
# rather than using softfloat when the fpu is present but only
# supports single precision. Reject them.
printf "checking whether compiler's double type is IEEE double... "
echo 'typedef char dblcheck[(int)sizeof(double)-5];' > "$tmpc"
if $CC $CFLAGS_C99FSE $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
else
printf "no\n"
fail "$0: error: compiler's floating point configuration is unsupported"
fi
else
SUBARCH=${SUBARCH}-nofpu
fi
if trycppif __SH_FDPIC__ "$t" ; then
SUBARCH=${SUBARCH}-fdpic
fi
fi

test "$SUBARCH" \
&& printf "configured for %s variant: %s\n" "$ARCH" "$ARCH$SUBARCH"

case "$ARCH$SUBARCH" in
arm) ASMSUBARCH=el ;;
*) ASMSUBARCH=$SUBARCH ;;
esac

#
# Some build systems globally pass in broken CFLAGS like -ffast-math
# for all packages. On recent GCC we can detect this and error out
# early rather than producing a seriously-broken math library.
#
if trycppif "__FAST_MATH__" \
  "$CFLAGS_C99FSE $CPPFLAGS $CFLAGS" ; then
fail "$0: error: compiler has broken floating point; check CFLAGS"
fi

printf "creating config.mak... "

cmdline=$(quote "$0")
for i ; do cmdline="$cmdline $(quote "$i")" ; done

exec 3>&1 1>config.mak


cat << EOF
# This version of config.mak was generated by:
# $cmdline
# Any changes made here will be lost if configure is re-run
AR = ${AR:-\$(CROSS_COMPILE)ar}
RANLIB = ${RANLIB:-\$(CROSS_COMPILE)ranlib}
ARCH = $ARCH
SUBARCH = $SUBARCH
ASMSUBARCH = $ASMSUBARCH
srcdir = $srcdir
prefix = $prefix
libdir = $libdir
includedir = $includedir
testsdir = $testsdir
bindir = $bindir
scriptsdir = $scriptsdir
pythondir = $pythondir
sourcesdir = $sourcesdir
CC = $CC
CXX = $CXX
CFLAGS = $CFLAGS
CXXFLAGS = $CXXFLAGS
CFLAGS_AUTO = $CFLAGS_AUTO
CXXFLAGS_AUTO = $CXXFLAGS_AUTO
CPPFLAGS = $CPPFLAGS
LDFLAGS = $LDFLAGS
LDFLAGS_AUTO = $LDFLAGS_AUTO
CROSS_COMPILE = $CROSS_COMPILE
EOF
exec 1>&3 3>&-

test "$srcdir" = "." || ln -sf $srcdir/Makefile .

printf "done\n"

printf "creating pkgconfig... "
mkdir -p ./lib/pkgconfig
VERSION=$(cat ${srcdir}/VERSION)

cat > ./lib/pkgconfig/libytp.pc <<EOF
prefix=${prefix}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: libytp
Description: ytp functions
Version: ${VERSION}

Requires:
Libs: -L\${libdir} -lytp
Cflags: -I\${includedir}
Requires.private: libfmc libfmc++
EOF

printf "done\n"
